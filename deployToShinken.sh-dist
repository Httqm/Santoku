#!/usr/bin/env bash

# Copyright (C) 2013 Matthieu FOURNET, fournet.matthieu@gmail.com
#
# This file is part of Santoku.
#
# Santoku is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Santoku is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Santoku.  If not, see <http://www.gnu.org/licenses/>
#


trap "echo;echo 'Interrupted by CTRL-c.';exit 1;" INT


########################################## ##########################################################
# CONFIG
########################################## ##########################################################

useSsh='true'			# true|false. If true, deliver files through SSH using 'scp'.
						# Otherwise simply 'cp' them.


# Shinken host
# These settings are used only if $useSsh is true
shinkenHost='192.168.1.101'
shinkenSshUser='root'
# /config values for Shinken host


# local host
# These settings are used only if $useSsh is false
sourceDirectory='./output/'										# final '/' expected
logFile='./checkConf.log'
filesToBackup='example.csv deployToShinken.sh modules/config.py'	# change 'example.csv' into your
																	# CSV config file name.
# /config values for local host


shinkenDirectoryBase='/usr/local/shinken/'							# final '/' expected
shinkenDirectoryEtc=$shinkenDirectoryBase'etc/'					# final '/' expected
shinkenDirectoryEtcHosts=$shinkenDirectoryEtc'hosts/'				# final '/' expected
shinkenDirectoryEtcServices=$shinkenDirectoryEtc'services/'		# final '/' expected

shinkenCheckBin=$shinkenDirectoryBase'bin/shinken-arbiter'
shinkenRestartCmd='/etc/init.d/shinken restart'
shinkenConfigFile=$shinkenDirectoryEtc'nagios.cfg'


# misc / cosmetics
stringOk='[ OK ]'
stringKo='[ KO ]'
backupSuffix='_PREVIOUS_VERSION'


########################################## ##########################################################
# FUNCTIONS
########################################## ##########################################################

checkFileOrDirectoryExists() {
	local fileOrDirToCheck=$1
	if "$useSsh"; then
		ssh "$shinkenSshUser"@"$shinkenHost" "[ -e \"$fileOrDirToCheck\" ]" && : || { echo " $stringKo : the remote file or directory \"$fileOrDirToCheck\" doesn't exist."; exit 1; }
	else
		[ -e "$fileOrDirToCheck" ] && : || { echo " $stringKo : the local file or directory \"$1\" doesn't exist."; exit 1; }
	fi
	}


copyFileToShinkenFileTree() {
	local fileToCopy=$1
	local destinationDir=$2		# this can be either on localhost or on "$shinkenHost"
	backupFile "$destinationDir"$(basename "$fileToCopy")

	if "$useSsh"; then
		scp -q "$fileToCopy" "$shinkenSshUser"@"$shinkenHost":"$destinationDir" 1>/dev/null 2>&1 || { echo "Can not copy '$fileToCopy' to '$shinkenHost'"; exit 1; }
	else
		cp "$fileToCopy" "$destinationDir"
	fi
	}


backupFile() {
	local absolutePathToFileToBackup=$1
	command="[ -f \"$absolutePathToFileToBackup\" ] && cp \"$absolutePathToFileToBackup\" \"$absolutePathToFileToBackup$backupSuffix\""
	if "$useSsh"; then
		ssh "$shinkenSshUser"@"$shinkenHost" "$command"
	else
		eval "$command"
	fi
	}


checkShinkenConfig() {
	command="$shinkenCheckBin -v -c $shinkenConfigFile"
	if "$useSsh"; then
		ssh "$shinkenSshUser"@"$shinkenHost" "$command" > "$logFile"
	else
		eval "$command" > "$logFile"
	fi
	}


restartShinken() {
	if "$useSsh"; then
		ssh "$shinkenSshUser"@"$shinkenHost" "$shinkenRestartCmd"
	else
		eval "$shinkenRestartCmd"
	fi
	}


showCheckConfLog() {
	echo "$stringKo"
	grep -i "error\s*:" "$logFile"
	echo
	echo "Read full details in '$logFile'"
	}


########################################## ##########################################################
# main()
########################################## ##########################################################

echo -n ' Backuping files ............. '
for file in $filesToBackup;do
	fileWithAbsolutePath="$(pwd)/$file"	# since 'backupFile' expects absolute paths
	backupFile "$fileWithAbsolutePath"
done
echo "$stringOk"	# TODO : manage return status


for fileOrDirectory in "$shinkenDirectoryEtc" "$shinkenDirectoryEtcHosts" "$shinkenDirectoryEtcServices" "$shinkenCheckBin" "$shinkenConfigFile";do
	checkFileOrDirectoryExists "$fileOrDirectory"
done


echo -n ' Copying files ............... '
copyFileToShinkenFileTree ${sourceDirectory}commands.cfg "$shinkenDirectoryEtc"
copyFileToShinkenFileTree ${sourceDirectory}hosts.cfg "$shinkenDirectoryEtcHosts"
copyFileToShinkenFileTree ${sourceDirectory}services.cfg "$shinkenDirectoryEtcServices"
echo "$stringOk"


echo -n ' Checking configuration ...... '
checkShinkenConfig && echo "$stringOk" || { showCheckConfLog; exit 1; }


echo ' Restarting Shinken .......... ...'
restartShinken && echo "$stringOk" || echo "$stringKo"

########################################## ##########################################################
# THE END !
########################################## ##########################################################
